
# differential_equations_adrian_janucik -----------------------------------

# Setup -------------------------------------------------------------------

library(phaseR)
library(deSolve)
library(magrittr)

# y' = 2y -----------------------------------------------------------------



# Function describing the differential equation

equation_1 <- function(x, y, parameters){
  dx.dy_1 <- 2*y
  list(dx.dy_1)
}

# We start from y = 0.1 to visualize how the function grows in time
y <- 0.1
# As there are no parameters we leave parms <- FALSE | By parms I mean q,p,s,k etc,
parms1 <- FALSE
# Now we specify the time in which do we want our differential equation solved
# times <- 0:100 or times <- seq(0,100,1), but we choose 5 just to make visualization clearer

# -------------------------------------------------------------------------

# WE CAN MANIPLUATE 'times' VALUE WHEN CREATING 'e1solution' TO CHANGE
# HOW THE VISUALISATION OF THE SOLUTION IS PRESENTED ON THE LINE CHART

# -------------------------------------------------------------------------


# Solving the differential equation and plotting it

e1solution <- ode(y, times = 0:6, func = equation_1, parms1)

# Descriptive statistics for the solution
head(e1solution)
tail(e1solution)
summary(e1solution)
# Solution visualisation 
plot(e1solution ,main = "Rozwiązanie RR y'= 2y", lwd = 2, xlab = "time (y)")



# Flow field (Error works as a warning)
equation1_flowField <- flowField(equation_1, xlim = c(-1, 1), 
                                 ylim = c(-1, 1), parameters = NULL, 
                                 points = 31, system = "one.dim", 
                                 add = FALSE, xlab = "x", ylab = "y", 
                                 main = "Pole kierunków RR y' = 2y", col = "darkblue")+ 
  grid(col = "black")

# Nullclines

equation1_nullclines <- nullclines(equation_1,
                                   xlim = c(-1, 1),
                                   ylim = c(-1, 1))


#  y' = 2x ----------------------------------------------------------------

equation_2 <- function(x, y, parameters){
  dx.dy_2 <- 2*x
  list(dx.dy_2)
} 

parms2 <- FALSE

# -------------------------------------------------------------------------

# MANIPULATING 'times' IN 'e2solution' DOESNT SIGNIFICANTLY IMPACT
# HOW THE SOLUTION IS VISUALIZED
# differential_equations_adrian_janucik -----------------------------------
# -------------------------------------------------------------------------

e2solution <- ode(y = 0, times = 0:100, func = equation_2, parms2)

head(e2solution)
tail(e2solution)
summary(e2solution)

plot(e2solution, main = "Rozwiązanie RR y'= 2x", lwd = 2, xlab = "time (y)")+
  grid()

# Error - arrows are NULL length
# equation_2.flowField <- flowField(equation_2, xlim = c(-1, 1), 
#                                  ylim = c(-1, 1), parameters = NULL, 
#                                  points = 2, system = "one.dim", 
#                                  add = FALSE, xlab = "x", ylab = "y", 
#                                  main = "Pole kierunków RR y' = 2x",
#                                  arrow.type = "equal", arrow.head = 0.1)+ 
#  grid()





# -------------------------------------------------------------------------


diff <- function(x,y)
{
  return(2*x - 0*y) #Try also x+y
}

# Line function
TheLine <- function(x1,y1,slp,d)
{
  z = slope*(d-x1)+y1
  return(z)
}

# Domains
x = seq(-20,20,0.5)
y = seq(-20,20,0.5)

# Points to draw our graph
x_axis = c(-5,5) 
y_axis = c(-5,5)
plot(x_axis, y_axis, main="Pole kierunków RR y' = 2x")+
  grid(col = "black")


# Let's generate the slope field
for(j in x)
{
  for(k in y)
  {
    slope = diff(j,k)
    domain = seq(j-0.07,j+0.07,0.14)
    z = TheLine(j,k,slope,domain)
    arrows(domain[1],z[1],domain[2],z[2],length=0.08, col = "blue")
  }
}





# Just integration --------------------------------------------------------


# Change Inf argument to the upper and lower end of the integrate 

func_e1 <- function(y){
  2*y
}

func_e1_sol <- integrate(func_e1, lower = -Inf, upper = Inf)
print(func_e1_sol)


func_e2 <- function(x){
  2*x
}

func_e2_sol <- integrate(func_e2, lower = -Inf, upper = Inf)

# -------------------------------------------------------------------------
# differential_equations_adrian_janucik -----------------------------------
# https://www.r-bloggers.com/generate-slope-fields-in-r-and-python/
# https://www.youtube.com/watch?v=RkPGY7_2LQM
